#!/usr/bin/env python3
"""
Script de teste para verificar valida√ß√£o de CPF duplicado
"""

import requests
import json

# Configura√ß√µes
BASE_URL = "http://127.0.0.1:5000"
CPF_TESTE = "97060968687"  # CPF que j√° existe na base

def testar_cpf_duplicado():
    """Testa se a valida√ß√£o de CPF duplicado est√° funcionando"""
    
    print("üß™ TESTE DE VALIDA√á√ÉO DE CPF DUPLICADO")
    print("=" * 50)
    
    # Dados de teste
    dados_teste = {
        "usuario_id": "507f1f77bcf86cd799439011",  # ID fict√≠cio para teste
        "primeiro_nome": "TESTE",
        "sobrenome": "CPF DUPLICADO",
        "cpf": CPF_TESTE,
        "data_nascimento": "1990-01-01",
        "telefone": "11999999999",
        "endereco": {
            "rua": "Rua Teste",
            "numero": "123",
            "bairro": "Centro",
            "cidade": "S√£o Paulo",
            "estado": "SP",
            "cep": "01234-567"
        }
    }
    
    print(f"üìù Dados de teste:")
    print(f"   CPF: {CPF_TESTE}")
    print(f"   Nome: {dados_teste['primeiro_nome']} {dados_teste['sobrenome']}")
    print()
    
    try:
        # Fazer requisi√ß√£o POST para /clientes
        print("üöÄ Enviando requisi√ß√£o POST para /clientes...")
        response = requests.post(
            f"{BASE_URL}/clientes",
            json=dados_teste,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üìä Resposta recebida:")
        print(f"   Status: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        
        if response.text:
            try:
                response_data = response.json()
                print(f"   Dados: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
            except:
                print(f"   Texto: {response.text}")
        
        print()
        
        # Verificar se a valida√ß√£o funcionou
        if response.status_code == 409:
            print("‚úÖ SUCESSO: Valida√ß√£o de CPF duplicado funcionando!")
            print("   - Status 409 retornado corretamente")
            print("   - CPF duplicado foi rejeitado")
        elif response.status_code == 201:
            print("‚ùå PROBLEMA: CPF duplicado foi aceito!")
            print("   - Status 201 retornado (deveria ser 409)")
            print("   - Valida√ß√£o de CPF duplicado n√£o est√° funcionando")
        else:
            print(f"‚ö†Ô∏è  STATUS INESPERADO: {response.status_code}")
            print("   - Verificar logs do backend para entender o que aconteceu")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå ERRO: N√£o foi poss√≠vel conectar ao backend")
        print("   - Verifique se o servidor est√° rodando em http://127.0.0.1:5000")
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: {str(e)}")

def verificar_cpf_na_base():
    """Verifica se o CPF de teste existe na base"""
    
    print("\nüîç VERIFICANDO CPF NA BASE DE DADOS")
    print("=" * 50)
    
    try:
        # Buscar cliente por CPF (endpoint que precisamos criar)
        print("üîç Buscando cliente por CPF...")
        
        # Como n√£o temos endpoint para buscar por CPF, vamos listar todos os clientes
        # (isso √© apenas para teste, n√£o usar em produ√ß√£o)
        response = requests.get(f"{BASE_URL}/clientes")
        
        if response.status_code == 200:
            clientes = response.json()
            print(f"üìä Total de clientes na base: {len(clientes)}")
            
            # Procurar pelo CPF de teste
            cpf_encontrado = False
            for cliente in clientes:
                if cliente.get('cpf') == CPF_TESTE:
                    cpf_encontrado = True
                    print(f"‚úÖ CPF {CPF_TESTE} encontrado na base!")
                    print(f"   Cliente: {cliente.get('primeiro_nome')} {cliente.get('sobrenome')}")
                    break
            
            if not cpf_encontrado:
                print(f"‚ùå CPF {CPF_TESTE} N√ÉO encontrado na base")
                print("   - Isso pode explicar por que a valida√ß√£o n√£o est√° funcionando")
        else:
            print(f"‚ùå Erro ao buscar clientes: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar base: {str(e)}")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTES DE VALIDA√á√ÉO DE CPF")
    print("=" * 60)
    
    # Verificar se o backend est√° rodando
    try:
        response = requests.get(f"{BASE_URL}/")
        print("‚úÖ Backend est√° rodando")
    except:
        print("‚ùå Backend n√£o est√° rodando")
        print("   - Execute: cd SeentiCliente/dev && python3 app.py")
        exit(1)
    
    # Executar testes
    testar_cpf_duplicado()
    verificar_cpf_na_base()
    
    print("\nüèÅ TESTES CONCLU√çDOS")
    print("=" * 60)
