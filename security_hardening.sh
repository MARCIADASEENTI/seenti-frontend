#!/bin/bash
# security_hardening.sh - Script de fortalecimento de seguran√ßa
# Sprint 08 - Fortalecimento de Seguran√ßa

# Configura√ß√µes
SECURITY_LOG="security_hardening.log"
SECURITY_SCORE=0
MAX_SECURITY_SCORE=100

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para log com timestamp
log() {
    local message="[$(date +'%Y-%m-%d %H:%M:%S')] $1"
    echo -e "${GREEN}$message${NC}"
    echo "$message" >> "$SECURITY_LOG"
}

warn() {
    local message="[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1"
    echo -e "${YELLOW}$message${NC}"
    echo "$message" >> "$SECURITY_LOG"
}

error() {
    local message="[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1"
    echo -e "${RED}$message${NC}"
    echo "$message" >> "$SECURITY_LOG"
}

success() {
    local message="[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS: $1"
    echo -e "${CYAN}$message${NC}"
    echo "$message" >> "$SECURITY_LOG"
}

info() {
    local message="[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1"
    echo -e "${BLUE}$message${NC}"
    echo "$message" >> "$SECURITY_LOG"
}

# Fun√ß√£o para verificar permiss√µes de arquivos
check_file_permissions() {
    log "üîí Verificando permiss√µes de arquivos..."
    
    local files_to_check=(
        ".env:600"
        "*.sh:755"
        "SeentiCliente/dev/app.py:644"
        "SeentiCliente/Frontend/src/*.jsx:644"
    )
    
    for file_perm in "${files_to_check[@]}"; do
        local file_pattern="${file_perm%:*}"
        local expected_perm="${file_perm#*:}"
        
        # Encontrar arquivos que correspondem ao padr√£o
        while IFS= read -r -d '' file; do
            if [ -f "$file" ]; then
                local current_perm=$(stat -c %a "$file" 2>/dev/null || stat -f %Lp "$file" 2>/dev/null)
                
                if [ "$current_perm" = "$expected_perm" ]; then
                    success "   ‚úÖ $file: Permiss√µes corretas ($current_perm)"
                    ((SECURITY_SCORE += 5))
                else
                    warn "   ‚ö†Ô∏è  $file: Permiss√µes incorretas ($current_perm, esperado: $expected_perm)"
                    
                    # Corrigir permiss√µes se poss√≠vel
                    if chmod "$expected_perm" "$file" 2>/dev/null; then
                        success "   üîß Permiss√µes corrigidas para $expected_perm"
                        ((SECURITY_SCORE += 3))
                    else
                        error "   ‚ùå N√£o foi poss√≠vel corrigir permiss√µes"
                    fi
                fi
            fi
        done < <(find . -name "$file_pattern" -type f -print0 2>/dev/null)
    done
}

# Fun√ß√£o para verificar vari√°veis de ambiente sens√≠veis
check_sensitive_variables() {
    log "üîê Verificando vari√°veis de ambiente sens√≠veis..."
    
    # Verificar se .env existe e tem permiss√µes corretas
    if [ -f ".env" ]; then
        local env_perms=$(stat -c %a .env 2>/dev/null || stat -f %Lp .env 2>/dev/null)
        
        if [ "$env_perms" = "600" ]; then
            success "   ‚úÖ .env: Permiss√µes seguras ($env_perms)"
            ((SECURITY_SCORE += 10))
        else
            warn "   ‚ö†Ô∏è  .env: Permiss√µes inseguras ($env_perms)"
            chmod 600 .env 2>/dev/null && success "   üîß Permiss√µes corrigidas"
        fi
        
        # Verificar se cont√©m vari√°veis sens√≠veis
        if grep -q "MONGO_URI\|JWT_SECRET_KEY\|GOOGLE_CLIENT_SECRET" .env; then
            success "   ‚úÖ Vari√°veis sens√≠veis configuradas"
            ((SECURITY_SCORE += 10))
        else
            warn "   ‚ö†Ô∏è  Vari√°veis sens√≠veis n√£o encontradas"
        fi
    else
        warn "   ‚ö†Ô∏è  Arquivo .env n√£o encontrado"
    fi
    
    # Verificar se .env est√° no .gitignore
    if [ -f ".gitignore" ] && grep -q "\.env" .gitignore; then
        success "   ‚úÖ .env protegido no .gitignore"
        ((SECURITY_SCORE += 5))
    else
        error "   ‚ùå .env n√£o est√° protegido no .gitignore"
        echo ".env" >> .gitignore
        success "   üîß .env adicionado ao .gitignore"
        ((SECURITY_SCORE += 3))
    fi
}

# Fun√ß√£o para verificar configura√ß√µes de rede
check_network_security() {
    log "üåê Verificando configura√ß√µes de rede..."
    
    # Verificar se h√° portas abertas desnecess√°rias
    local open_ports=$(netstat -tlnp 2>/dev/null | grep LISTEN | awk '{print $4}' | cut -d: -f2 | sort -u)
    
    if [ -n "$open_ports" ]; then
        info "   üì° Portas abertas: $open_ports"
        
        # Verificar se apenas as portas necess√°rias est√£o abertas
        local expected_ports=(5001 5173)
        local unexpected_ports=()
        
        for port in $open_ports; do
            if [[ ! " ${expected_ports[@]} " =~ " ${port} " ]]; then
                unexpected_ports+=("$port")
            fi
        done
        
        if [ ${#unexpected_ports[@]} -eq 0 ]; then
            success "   ‚úÖ Apenas portas esperadas est√£o abertas"
            ((SECURITY_SCORE += 10))
        else
            warn "   ‚ö†Ô∏è  Portas inesperadas abertas: ${unexpected_ports[*]}"
        fi
    else
        info "   ‚ÑπÔ∏è  Nenhuma porta aberta detectada"
    fi
    
    # Verificar configura√ß√µes CORS
    if [ -f "SeentiCliente/dev/app.py" ]; then
        if grep -q "CORS" "SeentiCliente/dev/app.py"; then
            success "   ‚úÖ CORS configurado no backend"
            ((SECURITY_SCORE += 5))
        else
            warn "   ‚ö†Ô∏è  CORS n√£o configurado no backend"
        fi
    fi
}

# Fun√ß√£o para verificar depend√™ncias de seguran√ßa
check_dependency_security() {
    log "üì¶ Verificando depend√™ncias de seguran√ßa..."
    
    # Verificar se h√° depend√™ncias desatualizadas
    if [ -f "SeentiCliente/requirements.txt" ]; then
        info "   üîç Verificando depend√™ncias Python..."
        
        # Simular verifica√ß√£o de seguran√ßa (em produ√ß√£o seria com ferramentas reais)
        if command -v pip-audit &> /dev/null; then
            if pip-audit -r "SeentiCliente/requirements.txt" 2>/dev/null | grep -q "VULNERABILITY"; then
                warn "   ‚ö†Ô∏è  Vulnerabilidades encontradas em depend√™ncias Python"
            else
                success "   ‚úÖ Depend√™ncias Python seguras"
                ((SECURITY_SCORE += 10))
            fi
        else
            info "   ‚ÑπÔ∏è  pip-audit n√£o dispon√≠vel para verifica√ß√£o"
        fi
    fi
    
    # Verificar depend√™ncias Node.js
    if [ -f "SeentiCliente/Frontend/package.json" ]; then
        info "   üîç Verificando depend√™ncias Node.js..."
        
        if command -v npm &> /dev/null; then
            cd "SeentiCliente/Frontend" 2>/dev/null
            
            # Verificar se h√° vulnerabilidades conhecidas
            if npm audit --audit-level=moderate 2>/dev/null | grep -q "found"; then
                warn "   ‚ö†Ô∏è  Vulnerabilidades encontradas em depend√™ncias Node.js"
            else
                success "   ‚úÖ Depend√™ncias Node.js seguras"
                ((SECURITY_SCORE += 10))
            fi
            
            cd - > /dev/null
        fi
    fi
}

# Fun√ß√£o para verificar configura√ß√µes de autentica√ß√£o
check_authentication_security() {
    log "üîë Verificando configura√ß√µes de autentica√ß√£o..."
    
    # Verificar JWT
    if [ -f "SeentiCliente/dev/app.py" ]; then
        if grep -q "JWT_SECRET_KEY\|JWTManager" "SeentiCliente/dev/app.py"; then
            success "   ‚úÖ JWT configurado no backend"
            ((SECURITY_SCORE += 10))
        else
            warn "   ‚ö†Ô∏è  JWT n√£o configurado no backend"
        fi
        
        # Verificar se h√° rotas protegidas
        if grep -q "@jwt_required\|@jwt_required\(\)" "SeentiCliente/dev/app.py"; then
            success "   ‚úÖ Rotas protegidas com JWT"
            ((SECURITY_SCORE += 5))
        else
            warn "   ‚ö†Ô∏è  Rotas n√£o protegidas com JWT"
        fi
    fi
    
    # Verificar Google OAuth
    if [ -f "SeentiCliente/Frontend/src/components/cliente/Login.jsx" ]; then
        if grep -q "google\|oauth" "SeentiCliente/Frontend/src/components/cliente/Login.jsx"; then
            success "   ‚úÖ Google OAuth configurado no frontend"
            ((SECURITY_SCORE += 5))
        else
            warn "   ‚ö†Ô∏è  Google OAuth n√£o configurado no frontend"
        fi
    fi
}

# Fun√ß√£o para verificar logs e monitoramento
check_logging_security() {
    log "üìù Verificando configura√ß√µes de log e monitoramento..."
    
    # Verificar se h√° logs de seguran√ßa
    if [ -f "SeentiCliente/dev/app.py" ]; then
        if grep -q "logging\|logger" "SeentiCliente/dev/app.py"; then
            success "   ‚úÖ Sistema de logging configurado"
            ((SECURITY_SCORE += 5))
        else
            warn "   ‚ö†Ô∏è  Sistema de logging n√£o configurado"
        fi
    fi
    
    # Verificar se h√° monitoramento de erros
    if [ -f "SeentiCliente/Frontend/src/main.jsx" ]; then
        if grep -q "error\|ErrorBoundary\|catch" "SeentiCliente/Frontend/src/main.jsx"; then
            success "   ‚úÖ Tratamento de erros configurado no frontend"
            ((SECURITY_SCORE += 5))
        else
            warn "   ‚ö†Ô∏è  Tratamento de erros n√£o configurado no frontend"
        fi
    fi
}

# Fun√ß√£o para aplicar corre√ß√µes de seguran√ßa
apply_security_fixes() {
    log "üîß Aplicando corre√ß√µes de seguran√ßa..."
    
    local fixes_applied=0
    
    # 1. Corrigir permiss√µes de arquivos sens√≠veis
    if [ -f ".env" ]; then
        chmod 600 .env 2>/dev/null && ((fixes_applied++))
    fi
    
    # 2. Adicionar .env ao .gitignore se n√£o estiver
    if [ -f ".gitignore" ] && ! grep -q "\.env" .gitignore; then
        echo ".env" >> .gitignore && ((fixes_applied++))
    fi
    
    # 3. Verificar e corrigir permiss√µes de scripts
    chmod 755 *.sh 2>/dev/null && ((fixes_applied++))
    
    # 4. Criar arquivo de configura√ß√£o de seguran√ßa
    if [ ! -f "security.config" ]; then
        cat > "security.config" << 'EOF'
# Configura√ß√µes de Seguran√ßa - Seenti App
# Sprint 08 - Fortalecimento de Seguran√ßa

# Configura√ß√µes de JWT
JWT_ACCESS_TOKEN_EXPIRES=3600
JWT_REFRESH_TOKEN_EXPIRES=604800
JWT_ERROR_MESSAGE_KEY=error

# Configura√ß√µes de CORS
CORS_ORIGINS=http://localhost:5173,http://localhost:3000
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOW_HEADERS=Content-Type,Authorization

# Configura√ß√µes de Rate Limiting
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=900

# Configura√ß√µes de Log
LOG_LEVEL=INFO
LOG_FILE=seenti_app.log
LOG_MAX_SIZE=10MB
LOG_BACKUP_COUNT=5

# Configura√ß√µes de Seguran√ßa
SECURE_HEADERS=true
HSTS_MAX_AGE=31536000
CONTENT_SECURITY_POLICY=true
EOF
        ((fixes_applied++))
    fi
    
    if [ $fixes_applied -gt 0 ]; then
        success "‚úÖ $fixes_applied corre√ß√£o(√µes) de seguran√ßa aplicada(s)"
        ((SECURITY_SCORE += fixes_applied * 2))
    else
        info "‚ÑπÔ∏è  Nenhuma corre√ß√£o necess√°ria"
    fi
}

# Fun√ß√£o para gerar relat√≥rio de seguran√ßa
generate_security_report() {
    log "üìä Gerando relat√≥rio de seguran√ßa..."
    
    echo
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üîí RELAT√ìRIO DE SEGURAN√áA                ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo
    
    echo "üéØ Score de Seguran√ßa: $SECURITY_SCORE/$MAX_SECURITY_SCORE"
    
    # Classificar n√≠vel de seguran√ßa
    if [ $SECURITY_SCORE -ge 80 ]; then
        success "üèÜ N√≠vel de Seguran√ßa: EXCELENTE"
    elif [ $SECURITY_SCORE -ge 60 ]; then
        success "‚úÖ N√≠vel de Seguran√ßa: BOM"
    elif [ $SECURITY_SCORE -ge 40 ]; then
        warn "‚ö†Ô∏è  N√≠vel de Seguran√ßa: MODERADO"
    else
        error "‚ùå N√≠vel de Seguran√ßa: BAIXO"
    fi
    
    echo
    echo "üìã Resumo das Verifica√ß√µes:"
    echo "   üîí Permiss√µes de Arquivos: Verificadas"
    echo "   üîê Vari√°veis Sens√≠veis: Verificadas"
    echo "   üåê Configura√ß√µes de Rede: Verificadas"
    echo "   üì¶ Depend√™ncias: Verificadas"
    echo "   üîë Autentica√ß√£o: Verificada"
    echo "   üìù Logs e Monitoramento: Verificados"
    
    echo
    echo "üí° Recomenda√ß√µes de Seguran√ßa:"
    
    if [ $SECURITY_SCORE -lt 80 ]; then
        echo "   1. üîß Aplique as corre√ß√µes sugeridas acima"
        echo "   2. üîç Execute verifica√ß√µes regulares de seguran√ßa"
        echo "   3. üìö Consulte as melhores pr√°ticas de seguran√ßa"
        echo "   4. üö® Monitore logs de seguran√ßa continuamente"
    else
        echo "   1. üéâ Mantenha o excelente n√≠vel de seguran√ßa"
        echo "   2. üîç Continue monitorando regularmente"
        echo "   3. üìà Considere implementar testes de penetra√ß√£o"
        echo "   4. üèÜ Documente as pr√°ticas de seguran√ßa"
    fi
    
    echo
    success "‚ú® Relat√≥rio de seguran√ßa gerado com sucesso!"
}

# Fun√ß√£o principal
main() {
    log "üîí Iniciando fortalecimento de seguran√ßa do Seenti App..."
    
    # Limpar log anterior
    > "$SECURITY_LOG"
    
    echo
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üîí FORTALECIMENTO DE SEGURAN√áA           ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo
    
    # Executar todas as verifica√ß√µes de seguran√ßa
    check_file_permissions
    check_sensitive_variables
    check_network_security
    check_dependency_security
    check_authentication_security
    check_logging_security
    
    # Aplicar corre√ß√µes autom√°ticas
    apply_security_fixes
    
    # Gerar relat√≥rio final
    generate_security_report
    
    # Salvar score final
    echo "$SECURITY_SCORE" > "security_score.txt"
    
    echo
    success "üéØ Fortalecimento de seguran√ßa conclu√≠do!"
    echo "üìù Log salvo em: $SECURITY_LOG"
    echo "üìä Score salvo em: security_score.txt"
}

# Executar fun√ß√£o principal
main "$@"
